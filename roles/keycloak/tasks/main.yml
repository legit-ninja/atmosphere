# Copyright (c) 2022 VEXXHOST, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Create a Keycloak namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ keycloak_helm_release_namespace }}"

- name: Get the Kuberentes service for Percona XtraDB Cluster
  run_once: true
  kubernetes.core.k8s_info:
    kind: Service
    name: "{{ openstack_helm_endpoints.oslo_db.hosts.default }}"
    namespace: openstack
  register: _pxc_service

- name: Install Kubernetes python package
  ansible.builtin.pip:
    name: PyMySQL

- name: Create Keycloak database
  run_once: true
  community.mysql.mysql_db:
    login_host: "{{ _pxc_service.resources[0].spec.clusterIP }}"
    login_user: root
    login_password: "{{ openstack_helm_endpoints.oslo_db.auth.admin.password }}"
    name: "{{ keycloak_database_name }}"

- name: Check if the Keycloak database secret exists
  run_once: true
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: keycloak-db-credentials
    namespace: "{{ keycloak_helm_release_namespace }}"
  register: _keycloak_db_secret
  ignore_errors: true

- name: Create a Keycloak database secret
  when: ( _keycloak_db_secret.resources | length==0 )
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      stringData:
        username: keycloak
        password: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=32') }}"
      kind: Secret
      metadata:
        name: keycloak-db-credentials
        namespace: "{{ keycloak_helm_release_namespace }}"
      type: Opaque

- name: Grab Keycloak database secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: keycloak-db-credentials
    namespace: "{{ keycloak_helm_release_namespace }}"
  register: _keycloak_db_secret

- name: Create a Keycloak user
  community.mysql.mysql_user:
    login_host: "{{ _pxc_service.resources[0].spec.clusterIP }}"
    login_user: root
    login_password: "{{ openstack_helm_endpoints.oslo_db.auth.admin.password }}"
    name: "{{ _keycloak_db_secret.resources[0]['data']['username'] | b64decode }}"
    password: "{{ _keycloak_db_secret.resources[0]['data']['password'] | b64decode }}"
    host: "%"
    priv: "{{ keycloak_database_name }}.*:ALL"

- name: Deploy Helm chart
  run_once: true
  kubernetes.core.helm:
    name: "{{ keycloak_helm_release_name }}"
    chart_ref: "{{ keycloak_helm_chart_ref }}"
    release_namespace: "{{ keycloak_helm_release_namespace }}"
    create_namespace: true
    kubeconfig: /etc/kubernetes/admin.conf
    wait: true
    values: "{{ _keycloak_helm_values | combine(keycloak_helm_values, recursive=True) }}"

- name: Create realm and clients
  when: (_keycloak_realms + keycloak_realms) | length > 0
  block:
    - name: Wait until Keycloak ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: StatefulSet
        name: keycloak
        namespace: "{{ keycloak_helm_release_namespace }}"
      register: _keycloak_statefulest_info
      until: _keycloak_statefulest_info.resources[0].status.readyReplicas >= 1
      retries: 60
      delay: 10

    - name: Create realms
      community.general.keycloak_realm:
        auth_client_id: admin-cli
        auth_keycloak_url: "https://{{ keycloak_host }}"
        auth_realm: master
        auth_username: "{{ keycloak_admin_username }}"
        auth_password: "{{ keycloak_admin_password }}"
        id: "{{ item.id }}"
        realm: "{{ item.id }}"
        enabled: true
      loop: "{{ _keycloak_realms + keycloak_realms }}"
      retries: 60
      delay: 5
      register: _result
      until: _result is not failed

    - name: Create clients
      community.general.keycloak_client:
        auth_client_id: admin-cli
        auth_keycloak_url: "https://{{ keycloak_host }}"
        auth_realm: master
        auth_username: "{{ keycloak_admin_username }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        realm: "{{ item.0.id }}"
        client_id: "{{ item.1.id }}"
        name: "{{ item.1.id }}"
        root_url: "{{ item.1.root_url }}"
        admin_url: "{{ item.1.admin_url }}"
        base_url: "{{ item.1.base_url }}"
        enabled: true
        client_authenticator_type: client-secret
        public_client: false
        secret: "{{ item.1.secret }}"
        redirect_uris: "{{ item.1.redirect_uris }}"
        web_origins: "{{ item.1.web_origins }}"
        standard_flow_enabled: "{{ item.1.standard_flow_enabled }}"
        direct_access_grants_enabled: "{{ item.1.direct_access_grants_enabled }}"
        protocol: "{{ item.1.protocol }}"
      with_subelements:
        - "{{ _keycloak_realms + keycloak_realms }}"
        - clients
      retries: 60
      delay: 5
      register: _result
      until: _result is not failed
